[{"path":"https://rformassspectrometry.github.io/MsBackendSql/articles/MsBackendSql.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Storing Mass Spectrometry Data in SQL Databases","text":"Spectra Bioconductor package provides flexible expandable infrastructure Mass Spectrometry (MS) data. package supports interchangeable use different backends provide additional file support different ways store represent MS data. MsBackendSql package provides backends store data whole MS experiments SQL databases. data databases can easily (efficiently) accessed using Spectra objects use MsBackendSql class interface data database. Spectra objects minimal memory footprint hence allow analysis large data sets even computers limited hardware capabilities. certain operations, performance data representation superior low-memory (-disk) data representations Spectra’s MsBackendMzR backend. Finally, MsBackendSql supports also remote data access e.g. central database server hosting several large MS data sets.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/articles/MsBackendSql.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Storing Mass Spectrometry Data in SQL Databases","text":"package can installed BiocManager package. install BiocManager use install.packages(\"BiocManager\") , , BiocManager::install(\"MsBackendSql\") install package.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/articles/MsBackendSql.html","id":"creating-and-using-msbackendsql-sql-databases","dir":"Articles","previous_headings":"","what":"Creating and using MsBackendSql SQL databases","title":"Storing Mass Spectrometry Data in SQL Databases","text":"MsBackendSql SQL databases can created either importing (raw) MS data MS data files using createMsBackendSqlDatabase() using backendInitialize() function providing addition database connection also full MS data import DataFrame. first example use createMsBackendSqlDatabase() function takes connection (empty) database names files data imported input parameters creates necessary database tables stores full data database. create empty SQLite database (temporary file) fill MS data two mzML files (msdata package). default m/z intensity values stored BLOB data types database. advantages performance extract peaks data database example allow filter peaks m/z values directly database. alternative also possible individual m/z intensity values separate rows database table. long table format results however considerably larger databases (potentially poorer performance). Note also code backend optimized MySQL/MariaDB databases taking advantage table partitioning specialized table storage options. SQL database server however also supported (also portable, self-contained SQLite databases). MsBackendSql package provides two backends interact databases: (default) MsBackendSql class MsBackendOfflineSql, inherits properties functions former, store connection database within object connects (disconnects) () database function call. allows use latter also parallel processing setups save/load object (e.g. using save saveRDS). Thus, applications MsBackendOfflineSql might used preferred backend SQL databases. access data database create Spectra object providing connection database constructor call specifying use MsBackendSql backend using source parameter. alternative, MsBackendOfflineSql backend also used interface MS data SQL database. contrast MsBackendSql, MsBackendOfflineSql contain active (open) connection database hence supports serializing (saving) object disk using e.g. save() function, parallel processing (supported database system). Thus, use cases MsBackendOfflineSql used instead MsBackendSql. See information MsBackendOfflineSql. Spectra objects allow also change backend backend (extending MsBackend) using setBackend() function. use function first load data memory changing MsBackendSql MsBackendMemory. function also possible change backend MsBackendSql case new database created data originating backend stored database. change backend MsBackendOfflineSql need provide connection information SQL database additional parameters. parameters need passed dbConnect() call establish connection database. parameters include database driver (parameter drv), database name eventually user name, host etc (see ?dbConnect information). simple example store data SQLite database thus need provide database name, corresponds SQLite database file. example store data temporary file. Similar Spectra object can retrieve available spectra variables using spectraVariables() function. MS peak data can accessed using either mz(), intensity() peaksData() functions. extract peaks matrix 5th spectrum display first 6 rows. data (peaks data spectra variables) always retrieved fly database resulting thus minimal memory footprint Spectra object. backend supports also adding additional spectra variables changing values. add 10 seconds retention time spectrum. operations however change data database (always considered read-) cached locally within backend object (memory). size memory object thus higher changing spectra variable. $<- operations can also used cache spectra variables (temporarily) memory can eventually improve performance. test time takes extract MS level spectrum database, cache MS levels memory using $msLevel <- test timing extract cached variable. can also use reset() function reset data original state (cause local spectra variables deleted backend initialized original data database). use MsBackendOfflineSql backend need provide information required connect database along database driver Spectra function. parameters required connect database depends SQL database used driver. example data stored SQLite database, hence use SQLite() database driver need provide database name dbname parameter. MySQL/MariaDB database use MariaDB() driver provide database name, user name, password well host name port database accessible. backend provides exact functionality MsBackendSql difference connection database opened closed function call. leads slightly lower performance, allows serialize object (.e. save/load object /disk) use (hence Spectra object) also parallel processing setup. contrast, MsBackendSql parallel processing disabled since possible share active backend connection within object across different parallel processes. compare performance two backends. performance difference result opening closing database connection call. Note also depend SQL server used. SQLite databases almost overhead.","code":"library(RSQLite)  dbfile <- tempfile() con <- dbConnect(SQLite(), dbfile)  library(MsBackendSql) fls <- dir(system.file(\"sciex\", package = \"msdata\"), full.names = TRUE) createMsBackendSqlDatabase(con, fls) sps <- Spectra(con, source = MsBackendSql()) sps ## MSn data (Spectra) with 1862 spectra in a MsBackendSql backend: ##        msLevel precursorMz  polarity ##      <integer>   <numeric> <integer> ## 1            1          NA         1 ## 2            1          NA         1 ## 3            1          NA         1 ## 4            1          NA         1 ## 5            1          NA         1 ## ...        ...         ...       ... ## 1858         1          NA         1 ## 1859         1          NA         1 ## 1860         1          NA         1 ## 1861         1          NA         1 ## 1862         1          NA         1 ##  ... 34 more variables/columns. ##  Use  'spectraVariables' to list all of them. ## Database: /tmp/RtmpT9I2S9/filea5117522178 sps_mem <- setBackend(sps, MsBackendMemory()) sps_mem ## MSn data (Spectra) with 1862 spectra in a MsBackendMemory backend: ##        msLevel     rtime scanIndex ##      <integer> <numeric> <integer> ## 1            1     0.280         1 ## 2            1     0.559         2 ## 3            1     0.838         3 ## 4            1     1.117         4 ## 5            1     1.396         5 ## ...        ...       ...       ... ## 1858         1   258.636       927 ## 1859         1   258.915       928 ## 1860         1   259.194       929 ## 1861         1   259.473       930 ## 1862         1   259.752       931 ##  ... 34 more variables/columns. ## Processing: ##  Switch backend from MsBackendSql to MsBackendMemory [Fri Sep 20 20:07:26 2024] sps2 <- setBackend(sps_mem, MsBackendOfflineSql(), drv = SQLite(),                    dbname = tempfile()) sps2 ## MSn data (Spectra) with 1862 spectra in a MsBackendOfflineSql backend: ##        msLevel precursorMz  polarity ##      <integer>   <numeric> <integer> ## 1            1          NA         1 ## 2            1          NA         1 ## 3            1          NA         1 ## 4            1          NA         1 ## 5            1          NA         1 ## ...        ...         ...       ... ## 1858         1          NA         1 ## 1859         1          NA         1 ## 1860         1          NA         1 ## 1861         1          NA         1 ## 1862         1          NA         1 ##  ... 34 more variables/columns. ##  Use  'spectraVariables' to list all of them. ## Database: /tmp/RtmpT9I2S9/filea51248085db ## Processing: ##  Switch backend from MsBackendSql to MsBackendMemory [Fri Sep 20 20:07:26 2024] ##  Switch backend from MsBackendMemory to MsBackendOfflineSql [Fri Sep 20 20:07:27 2024] spectraVariables(sps) ##  [1] \"msLevel\"                  \"rtime\"                    ##  [3] \"acquisitionNum\"           \"scanIndex\"                ##  [5] \"dataStorage\"              \"dataOrigin\"               ##  [7] \"centroided\"               \"smoothed\"                 ##  [9] \"polarity\"                 \"precScanNum\"              ## [11] \"precursorMz\"              \"precursorIntensity\"       ## [13] \"precursorCharge\"          \"collisionEnergy\"          ## [15] \"isolationWindowLowerMz\"   \"isolationWindowTargetMz\"  ## [17] \"isolationWindowUpperMz\"   \"peaksCount\"               ## [19] \"totIonCurrent\"            \"basePeakMZ\"               ## [21] \"basePeakIntensity\"        \"ionisationEnergy\"         ## [23] \"lowMZ\"                    \"highMZ\"                   ## [25] \"mergedScan\"               \"mergedResultScanNum\"      ## [27] \"mergedResultStartScanNum\" \"mergedResultEndScanNum\"   ## [29] \"injectionTime\"            \"filterString\"             ## [31] \"spectrumId\"               \"ionMobilityDriftTime\"     ## [33] \"scanWindowLowerLimit\"     \"scanWindowUpperLimit\"     ## [35] \"spectrum_id_\" peaksData(sps)[[5]] |> head() ##            mz intensity ## [1,] 105.0347         0 ## [2,] 105.0362       164 ## [3,] 105.0376         0 ## [4,] 105.0391         0 ## [5,] 105.0405       328 ## [6,] 105.0420         0 print(object.size(sps), units = \"KB\") ## 91.5 Kb sps$rtime <- sps$rtime + 10 print(object.size(sps), units = \"KB\") ## 106.2 Kb system.time(msLevel(sps)) ##    user  system elapsed  ##   0.008   0.000   0.008 sps$msLevel <- msLevel(sps) system.time(msLevel(sps)) ##    user  system elapsed  ##   0.002   0.000   0.003 sps <- reset(sps) sps_off <- Spectra(dbfile, drv = SQLite(),                    source = MsBackendOfflineSql()) sps_off ## MSn data (Spectra) with 1862 spectra in a MsBackendOfflineSql backend: ##        msLevel precursorMz  polarity ##      <integer>   <numeric> <integer> ## 1            1          NA         1 ## 2            1          NA         1 ## 3            1          NA         1 ## 4            1          NA         1 ## 5            1          NA         1 ## ...        ...         ...       ... ## 1858         1          NA         1 ## 1859         1          NA         1 ## 1860         1          NA         1 ## 1861         1          NA         1 ## 1862         1          NA         1 ##  ... 34 more variables/columns. ##  Use  'spectraVariables' to list all of them. ## Database: /tmp/RtmpT9I2S9/filea5117522178 library(microbenchmark) microbenchmark(msLevel(sps), msLevel(sps_off)) ## Unit: milliseconds ##              expr      min       lq     mean   median       uq       max neval ##      msLevel(sps) 5.394792 5.511370 5.715215 5.561288 5.615780 10.751885   100 ##  msLevel(sps_off) 6.776821 6.947093 7.116487 7.007074 7.145708  9.969315   100"},{"path":"https://rformassspectrometry.github.io/MsBackendSql/articles/MsBackendSql.html","id":"performance-comparison-with-other-backends","dir":"Articles","previous_headings":"","what":"Performance comparison with other backends","title":"Storing Mass Spectrometry Data in SQL Databases","text":"need retrieve spectra data --fly database impact performance data access function Spectra objects using MsBackendSql backends. evaluate impact next compare performance MsBackendSql Spectra backends, specifically, MsBackendMzR default backend read represent raw MS data, MsBackendMemory backend keeps MS data memory (thus suggested larger MS experiments). Similar MsBackendMzR, also MsBackendSql keeps limited amount data memory. -disk backends need thus retrieve spectra MS peaks data --fly either original raw data files (case MsBackendMzR) SQL database (case MsBackendSql). -memory backend MsBackendMemory supposed provide fastest data access since data kept memory. thus create Spectra objects data using different backends. first compare memory footprint 3 backends. MsBackendSql lowest memory footprint 3 backends keep data memory. MsBackendMzR keeps spectra variables, except MS peaks data, memory thus larger size. MsBackendMemory keeps data (including MS peaks data) memory thus largest size memory. Next compare performance extract MS level spectrum 4 different Spectra objects. Extracting MS levels thus slowest MsBackendSql, surprising backends keep data memory MsBackendSql needs retrieve database. next compare performance access full peaks data Spectra object. expected, MsBackendMemory fasted access full peaks data. MsBackendSql outperforms however MsBackendMzR providing faster access m/z intensity values. Performance can improved MsBackendMzR using parallel processing. Note MsBackendSql support parallel processing thus parallel processing (silently) disabled functions peaksData(). next compare performance subsetting operations. two -disk backends MsBackendSql MsBackendMzR show comparable performance operation. filtering involves access spectra variables (retention time case) , MsBackendSql needs first retrieved backend. MsBackendSql backend allows however also cache spectra variables (.e. stored within MsBackendSql object). access cached spectra variables can eventually faster dedicated SQL query needed. evaluate performance pure subsetting operation first define indices 10 random spectra subset Spectra objects . MsBackendSql outperforms backends keep data memory hence need subset . two backends need subset data keep memory cases data frame either reduced set spectra variables full MS data. last compare also extraction peaks data subset Spectra objects. MsBackendSql outperforms MsBackendMzR , unexpectedly, MsBackendMemory provides fasted access.","code":"sps <- Spectra(con, source = MsBackendSql()) sps_mzr <- Spectra(fls, source = MsBackendMzR()) sps_im <- setBackend(sps_mzr, backend = MsBackendMemory()) print(object.size(sps), units = \"KB\") ## 91.5 Kb print(object.size(sps_mzr), units = \"KB\") ## 386.7 Kb print(object.size(sps_im), units = \"KB\") ## 54494.5 Kb library(microbenchmark) microbenchmark(msLevel(sps),                msLevel(sps_mzr),                msLevel(sps_im)) ## Unit: microseconds ##              expr      min       lq       mean    median        uq      max ##      msLevel(sps) 5319.021 5440.528 5627.14524 5548.8700 5641.1975 9192.155 ##  msLevel(sps_mzr)  375.470  401.860  420.84532  414.1080  431.5995  656.455 ##   msLevel(sps_im)   10.980   13.625   19.25764   19.9675   21.6705   56.736 ##  neval ##    100 ##    100 ##    100 microbenchmark(peaksData(sps, BPPARAM = SerialParam()),                peaksData(sps_mzr, BPPARAM = SerialParam()),                peaksData(sps_im, BPPARAM = SerialParam()), times = 10) ## Unit: microseconds ##                                         expr        min         lq       mean ##      peaksData(sps, BPPARAM = SerialParam()) 102748.901 120690.587 286338.807 ##  peaksData(sps_mzr, BPPARAM = SerialParam()) 445855.544 454379.512 754403.375 ##   peaksData(sps_im, BPPARAM = SerialParam())    366.975    405.376   2068.014 ##      median          uq        max neval ##  357088.431  384309.469  526706.68    10 ##  781322.299 1096592.307 1112646.85    10 ##     544.185     682.363   15974.62    10 m2 <- MulticoreParam(2) microbenchmark(peaksData(sps, BPPARAM = m2),                peaksData(sps_mzr, BPPARAM = m2),                peaksData(sps_im, BPPARAM = m2), times = 10) ## Unit: microseconds ##                              expr        min         lq        mean      median ##      peaksData(sps, BPPARAM = m2)  96123.644 118907.451 173387.0432 124681.2415 ##  peaksData(sps_mzr, BPPARAM = m2) 468798.890 502285.020 679901.0569 638351.0695 ##   peaksData(sps_im, BPPARAM = m2)    395.928    615.648    618.2361    650.1225 ##          uq         max neval ##  137667.062  395346.652    10 ##  795025.420 1115451.765    10 ##     676.912     715.425    10 microbenchmark(filterRt(sps, rt = c(50, 100)),                filterRt(sps_mzr, rt = c(50, 100)),                filterRt(sps_im, rt = c(50, 100))) ## Unit: microseconds ##                                expr      min       lq      mean    median ##      filterRt(sps, rt = c(50, 100)) 2678.987 2777.936 2996.2061 2853.0065 ##  filterRt(sps_mzr, rt = c(50, 100)) 2042.540 2163.706 2332.3485 2222.6555 ##   filterRt(sps_im, rt = c(50, 100))  454.668  485.616  521.7936  515.3565 ##        uq       max neval ##  2900.090 18055.178   100 ##  2413.722  7062.854   100 ##   550.802   887.014   100 idx <- sample(seq_along(sps), 10) microbenchmark(sps[idx],                sps_mzr[idx],                sps_im[idx]) ## Unit: microseconds ##          expr     min       lq     mean   median       uq     max neval ##      sps[idx] 132.487 140.6175 151.1726 150.8165 155.9005 260.145   100 ##  sps_mzr[idx] 636.547 660.7620 673.8125 670.0200 679.7280 934.413   100 ##   sps_im[idx] 222.415 230.2145 241.5535 236.7065 246.2245 355.122   100 sps_10 <- sps[idx] sps_mzr_10 <- sps_mzr[idx] sps_im_10 <- sps_im[idx]  microbenchmark(peaksData(sps_10),                peaksData(sps_mzr_10),                peaksData(sps_im_10),                times = 10) ## Unit: microseconds ##                   expr       min        lq       mean    median        uq ##      peaksData(sps_10)  2534.698  2715.796  3300.4672  3542.001  3696.936 ##  peaksData(sps_mzr_10) 68249.592 68469.161 69669.0343 69207.087 70550.243 ##   peaksData(sps_im_10)   373.076   401.119   474.6464   409.143   587.536 ##        max neval ##   4016.091    10 ##  72088.272    10 ##    606.952    10"},{"path":"https://rformassspectrometry.github.io/MsBackendSql/articles/MsBackendSql.html","id":"considerations-for-database-systemsservers","dir":"Articles","previous_headings":"Performance comparison with other backends","what":"Considerations for database systems/servers","title":"Storing Mass Spectrometry Data in SQL Databases","text":"backends MsBackendSql package use standard SQL calls retrieve MS data database hence SQL database system (R package available) supported. SQLite-based databases represent easiest user friendly solution since database server administration user management required. Indeed, performance SQLite high, even large data sets. Server-based databases hand advantage enable centralized storage control MS data (inclusive user management etc). Also, server systems also allow data set server-specific configurations improve performance. comparison SQLite-based MariaDB-based MsBackendSql database large data set comprising 8,000 samples 15,000,000 spectra available . brief, performance extract data comparable individual spectra variables even faster SQLite database. complex SQL queries involved (combining several primary keys data fields) advanced MariaDB database outperformed SQLite.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/articles/MsBackendSql.html","id":"other-properties-of-the-msbackendsql","dir":"Articles","previous_headings":"","what":"Other properties of the MsBackendSql","title":"Storing Mass Spectrometry Data in SQL Databases","text":"MsBackendSql backend support parallel processing since database connection can shared across different (parallel) processes. Thus, methods Spectra objects use MsBackendSql automatically (silently) disable parallel processing even dedicated parallel processing setup passed along BPPARAM method. functions Spectra objects require load MS peak data (.e., m/z intensity values) memory. large data sets (computers limited hardware resources) function calls can cause --memory errors. One example lengths() function determines number peaks per spectrum loading peak matrix first memory. functions ideally called using peaksapply() function parameter chunkSize (e.g., peaksapply(sps, lengths, chunkSize = 5000L)). Instead processing full data set, data first split chunks size chunkSize stepwise processed. Hence, data chunkSize spectra loaded memory one iteration.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/articles/MsBackendSql.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Storing Mass Spectrometry Data in SQL Databases","text":"MsBackendSql provides MS data representations storage mode minimal memory footprint (R) still comparably efficient standard processing subsetting operations. backend specifically useful large MS data sets, even hosted remote (MySQL/MariaDB) servers. potential use case backend thus set central storage place MS experiments data analysts connecting remotely server perform initial data exploration filtering. subsetting smaller data set interest, users retrieve/download data changing backend e.g. MsBackendMemory, result download full data user computer’s memory.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/articles/MsBackendSql.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Storing Mass Spectrometry Data in SQL Databases","text":"","code":"sessionInfo() ## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ## [1] microbenchmark_1.5.0 RSQLite_2.3.7        MsBackendSql_1.3.5   ## [4] Spectra_1.15.8       ProtGenerics_1.37.1  BiocParallel_1.39.0  ## [7] S4Vectors_0.43.2     BiocGenerics_0.51.1  BiocStyle_2.33.1     ##  ## loaded via a namespace (and not attached): ##  [1] sass_0.4.9             MsCoreUtils_1.17.2     hms_1.1.3              ##  [4] digest_0.6.37          evaluate_1.0.0         bookdown_0.40          ##  [7] fastmap_1.2.0          blob_1.2.4             jsonlite_1.8.8         ## [10] progress_1.2.3         mzR_2.39.0             DBI_1.2.3              ## [13] BiocManager_1.30.25    codetools_0.2-20       textshaping_0.4.0      ## [16] jquerylib_0.1.4        cli_3.6.3              rlang_1.1.4            ## [19] crayon_1.5.3           Biobase_2.65.1         bit64_4.0.5            ## [22] cachem_1.1.0           yaml_2.3.10            tools_4.4.1            ## [25] parallel_4.4.1         memoise_2.0.1          ncdf4_1.23             ## [28] vctrs_0.6.5            R6_2.5.1               lifecycle_1.0.4        ## [31] fs_1.6.4               htmlwidgets_1.6.4      IRanges_2.39.2         ## [34] bit_4.0.5              clue_0.3-65            MASS_7.3-61            ## [37] ragg_1.3.3             cluster_2.1.6          pkgconfig_2.0.3        ## [40] desc_1.4.3             pkgdown_2.1.1.9000     bslib_0.8.0            ## [43] Rcpp_1.0.13            data.table_1.16.0      systemfonts_1.1.0      ## [46] xfun_0.47              knitr_1.48             htmltools_0.5.8.1      ## [49] rmarkdown_2.28         compiler_4.4.1         prettyunits_1.2.0      ## [52] MetaboCoreUtils_1.13.0"},{"path":"https://rformassspectrometry.github.io/MsBackendSql/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johannes Rainer. Author, maintainer. Chong Tang. Contributor. Laurent Gatto. Contributor.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rainer J (2024). MsBackendSql: SQL-based Mass Spectrometry Data Backend. R package version 1.3.5, https://github.com/RforMassSpectrometry/MsBackendSql.","code":"@Manual{,   title = {MsBackendSql: SQL-based Mass Spectrometry Data Backend},   author = {Johannes Rainer},   year = {2024},   note = {R package version 1.3.5},   url = {https://github.com/RforMassSpectrometry/MsBackendSql}, }"},{"path":"https://rformassspectrometry.github.io/MsBackendSql/index.html","id":"sql-based-mass-spectrometry-data-backend","dir":"","previous_headings":"","what":"SQL-based Mass Spectrometry Data Backend","title":"SQL-based Mass Spectrometry Data Backend","text":"repository provides backend Spectra objects supports storage mass spectrometry (MS) data SQL database. package provides functionality create databases original (raw) MS data files (mzML, mzXML netCDF format) allows extract data efficient way. information see package homepage.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/index.html","id":"creating-a-database","dir":"","previous_headings":"","what":"Creating a database","title":"SQL-based Mass Spectrometry Data Backend","text":"providing connection SQL database, createMsBackendSqlDatabase imports raw MS data provided file names stores dedicated database tables created import. MsBackendSql supports type SQL database, currently optimized MySQL/MariaDB databases.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/index.html","id":"using-a-msbackendsql-database","dir":"","previous_headings":"","what":"Using a MsBackendSql database","title":"SQL-based Mass Spectrometry Data Backend","text":"MS data MsBackendSql database can accessed Spectra package using MsBackendSql MS backend. Assuming variable dbcon represents (RDBI) database connection MsBackendSql, data can represented/used Spectra object : information see package homepage.","code":"library(Spectra) library(MsBackendSql) sps <- Spectra(dbcon, source = MsBackendSql())"},{"path":"https://rformassspectrometry.github.io/MsBackendSql/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"SQL-based Mass Spectrometry Data Backend","text":"package can installed ","code":"install.packages(\"BiocManager\") BiocManager::install(\"MsBackendSql\")"},{"path":"https://rformassspectrometry.github.io/MsBackendSql/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"SQL-based Mass Spectrometry Data Backend","text":"Contributions highly welcome follow contribution guidelines. Also, please check coding style guidelines RforMassSpectrometry vignette.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/reference/MsBackendOfflineSql.html","id":null,"dir":"Reference","previous_headings":"","what":"SQL-based MS backend without active database connection — MsBackendOfflineSql","title":"SQL-based MS backend without active database connection — MsBackendOfflineSql","text":"MsBackendOfflineSql backend extends MsBackendSql() backend directly inherits thus functions well properties. difference two backend MsBackendSql keeps active connection SQL database inside object MsBackendOfflineSql backends reconnects SQL database query. performance latter slightly lower (due need connect/disconnect database function call) can also used parallel processing environment.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/reference/MsBackendOfflineSql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SQL-based MS backend without active database connection — MsBackendOfflineSql","text":"","code":"MsBackendOfflineSql()  # S4 method for class 'MsBackendOfflineSql' backendInitialize(   object,   drv = NULL,   dbname = character(),   user = character(),   password = character(),   host = character(),   port = NA_integer_,   data,   ... )"},{"path":"https://rformassspectrometry.github.io/MsBackendSql/reference/MsBackendOfflineSql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SQL-based MS backend without active database connection — MsBackendOfflineSql","text":"object MsBackendOfflineSql object. drv DBI database driver object (SQLite() RSQLite package MariaDB() RMariaDB package). See dbConnect() information. dbname character(1) name database. Passed directly dbConnect(). user character(1) user name database. Passed directly dbConnect(). password character(1) password database. Note password stored (unencrypted) within object. Passed directly dbConnect(). host character(1) host running database. Passed directly dbConnect(). port integer(1) port number (optional). Passed directly dbConnect(). data backendInitialize(): optional DataFrame full spectra data inserted (new) MsBackendSql database. provided, assumed provided database connection information (writeable) empty database data inserted. data output spectraData another backend. ... ignored.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/reference/MsBackendOfflineSql.html","id":"creation-of-backend-objects","dir":"Reference","previous_headings":"","what":"Creation of backend objects","title":"SQL-based MS backend without active database connection — MsBackendOfflineSql","text":"empty instance MsBackendOfflineSql class can created using MsBackendOfflineSql() function. existing MsBackendSql SQL database can loaded backendInitialize() function. function takes parameters drv, dbname, user, password, host port, parameters passed dbConnect() function connect (existing) SQL database. See MsBackendSql() information create MsBackend SQL database.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/reference/MsBackendOfflineSql.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SQL-based MS backend without active database connection — MsBackendOfflineSql","text":"Johannes Rainer","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/reference/MsBackendSql.html","id":null,"dir":"Reference","previous_headings":"","what":"Spectra MS backend storing data in a SQL database — MsBackendSql","title":"Spectra MS backend storing data in a SQL database — MsBackendSql","text":"MsBackendSql implementation MsBackend() class Spectra() objects stores retrieves MS data SQL database. New databases can created raw MS data files using createMsBackendSqlDatabase().","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/reference/MsBackendSql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spectra MS backend storing data in a SQL database — MsBackendSql","text":"","code":"MsBackendSql()  createMsBackendSqlDatabase(   dbcon,   x = character(),   backend = MsBackendMzR(),   chunksize = 10L,   blob = TRUE,   partitionBy = c(\"none\", \"spectrum\", \"chunk\"),   partitionNumber = 10L )  # S4 method for class 'MsBackendSql' show(object)  # S4 method for class 'MsBackendSql' backendInitialize(object, dbcon, data, ...)  # S4 method for class 'MsBackendSql' dataStorage(object)  # S4 method for class 'MsBackendSql' x[i, j, ..., drop = FALSE]  # S4 method for class 'MsBackendSql' peaksData(object, columns = c(\"mz\", \"intensity\"))  # S4 method for class 'MsBackendSql' peaksVariables(object)  # S4 method for class 'MsBackendSql' intensity(object) <- value  # S4 method for class 'MsBackendSql' mz(object) <- value  # S4 method for class 'MsBackendSql' x$name <- value  # S4 method for class 'MsBackendSql' spectraData(object, columns = spectraVariables(object))  # S4 method for class 'MsBackendSql' reset(object)  # S4 method for class 'MsBackendSql' spectraNames(object)  # S4 method for class 'MsBackendSql' spectraNames(object) <- value  # S4 method for class 'MsBackendSql' filterMsLevel(object, msLevel = uniqueMsLevels(object))  # S4 method for class 'MsBackendSql' filterRt(object, rt = numeric(), msLevel. = integer())  # S4 method for class 'MsBackendSql' filterDataOrigin(object, dataOrigin = character())  # S4 method for class 'MsBackendSql' filterPrecursorMzRange(object, mz = numeric())  # S4 method for class 'MsBackendSql' filterPrecursorMzValues(object, mz = numeric(), ppm = 20, tolerance = 0)  # S4 method for class 'MsBackendSql' uniqueMsLevels(object, ...)  # S4 method for class 'MsBackendSql' backendMerge(object, ...)  # S4 method for class 'MsBackendSql' precScanNum(object)  # S4 method for class 'MsBackendSql' centroided(object)  # S4 method for class 'MsBackendSql' smoothed(object)  # S4 method for class 'MsBackendSql' tic(object, initial = TRUE)  # S4 method for class 'MsBackendSql' supportsSetBackend(object, ...)  # S4 method for class 'MsBackendSql' backendBpparam(object, BPPARAM = bpparam())  # S4 method for class 'MsBackendSql' dbconn(x)"},{"path":"https://rformassspectrometry.github.io/MsBackendSql/reference/MsBackendSql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spectra MS backend storing data in a SQL database — MsBackendSql","text":"dbcon Connection database. x createMsBackendSqlDatabase(): character names raw data files data imported. methods MsqlBackend instance. backend createMsBackendSqlDatabase(): MS backend can used import MS data raw files specified parameter x. chunksize createMsBackendSqlDatabase(): integer(1) defining number input processed per iteration. chunksize = 1 file specified x imported data inserted database. chunksize = 5 data 5 files imported (parallel) inserted database. Thus, higher values might result faster database creation, require also memory. blob createMsBackendSqlDatabase(): logical(1) whether individual m/z intensity values stored separately (blob = FALSE) m/z intensity values spectrum stored single BLOB SQL data type (blob = TRUE, default). partitionBy createMsBackendSqlDatabase(): character(1) defining peak data table partitioned. \"none\" (default): partitioning, \"spectrum\": peaks assigned partition based spectrum ID (number), .e. spectra evenly (consecutively) assigned across partitions. partitionNumber = 3, first spectrum assigned first partition, second second, third third fourth spectrum first partition. \"chunk\": spectra processed part chunk placed partition. spectra next processed chunk assigned next partition. Note available MySQL/MariaDB databases, .e., con MariaDBConnection. See details information. partitionNumber createMsBackendSqlDatabase(): integer(1) defining number partitions database table partitioned (supported MySQL/MariaDB databases). object MsBackendSql instance. data backendInitialize(): optional DataFrame full spectra data inserted (new) MsBackendSql database. provided, assumed dbcon (writeable) connection empty database data inserted. data output spectraData another backend. ... [: ignored. backendInitialize, parameter data used: additional parameters passed function creating database blob. [: integer logical subset object. j [: ignored. drop [: logical(1), ignored. columns spectraData(): character() optionally defining subset spectra variables returned. Defaults columns = spectraVariables(object) hence variables returned. peaksData accessor: optional character requested columns individual matrix returned list. Defaults columns = c(\"mz\", \"intensity\") columns listed peaksVariables supported. value setter methods: replacement value. name <-: character(1) name spectra variable replace. msLevel filterMsLevel(): integer specifying MS levels filter data. rt filterRt(): numeric(2) lower upper retention time. Spectra retention time >= rt[1] <= rt[2] returned. msLevel. filterRt(): integerwith MS level(s) retention time filter applied (spectra MS levels considered filter returned **). specified, retention time filter applied MS levels inobject`. dataOrigin filterDataOrigin(): character data origin values data subsetted. mz filterPrecursorMzRange(): numeric(2) desired lower upper limit precursor m/z range. filterPrecursorMzValues(): numeric m/z value(s) filter object. ppm filterPrecursorMzValues(): numeric m/z-relative maximal acceptable difference m/z value considered matching. Can length 1 equal length(mz). tolerance filterPrecursorMzValues(): numeric absolute difference m/z values considered matching. Can length 1 equal length(mz). initial tic(): logical(1) whether original total ion count returned (initial = TRUE, default) whether calculated spectras' intensities (initial = FALSE). BPPARAM backendBpparam(): BiocParallel parallel processing setup. See bpparam() information.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/reference/MsBackendSql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spectra MS backend storing data in a SQL database — MsBackendSql","text":"See documentation respective function.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/reference/MsBackendSql.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spectra MS backend storing data in a SQL database — MsBackendSql","text":"MsBackendSql class principally read-backend extending MsBackendCached() backend Spectra package allows changing adding (temporarily) spectra variables without changing original data SQL database.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/reference/MsBackendSql.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Spectra MS backend storing data in a SQL database — MsBackendSql","text":"MsBackendSql backend keeps (open) connection SQL database data hence support saving/loading backend disk (e.g. using save saveRDS). Also, reason, MsBackendSql support parallel processing. backendBpparam() method MsBackendSql thus always return SerialParam() object. MsBackendOfflineSql() used alternative supports saving/loading data /disk supports also parallel processing.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/reference/MsBackendSql.html","id":"creation-of-backend-objects","dir":"Reference","previous_headings":"","what":"Creation of backend objects","title":"Spectra MS backend storing data in a SQL database — MsBackendSql","text":"New backend objects can created MsBackendSql() function. SQL databases can created filled MS data raw data files using createMsBackendSqlDatabase() function using backendInitialize() providing data parameter data. addition possible create database Spectra object changing backend MsBackendSql MsBackendOfflineSql using setBackend() function. Existing SQL databases (created previously createMsBackendSqlDatabase() backendInitialize() data parameter) can loaded using conventional way create/initialize MsBackend classes, .e. using backendInitialize(). createMsBackendSqlDatabase(): create database fill MS data. Parameter dbcon expected database connection, parameter x character vector file names import data. Parameter backend used actual data import defaults backend = MsBackendMzR() hence allowing import data mzML, mzXML netCDF files. Parameter chunksize allows define number files (x) data imported one iteration. default chunksize = 10L data imported 10 files x time (backend supports even parallel) data inserted database. Larger chunk sizes require memory also larger disk space (data import performed temporary files) might eventually faster. Parameter blob allows define whether m/z intensity values spectrum stored BLOB SQL data type database (blob = TRUE, default) individual m/z intensity values peak stored separately (blob = FALSE). latter case results much larger database slower performance peaksData function, allow define custom (manual) SQL queries individual peak values. data can stored SQL database, present suggested use MySQL/MariaDB databases. dbcon connection MySQL/MariaDB database, tables use ARIA engine providing faster data access use table partitioning: tables splitted multiple partitions can improve data insertion index generation. Partitioning can defined parameters partitionBy partitionNumber. default partitionBy = \"none\" partitioning performed. blob = TRUE partitioning usually required. blob = FALSE  large datasets suggested enable table partitioning selecting either partitionBy = \"spectrum\" partitionBy = \"chunk\". first option assignes consecutive spectra different partitions latter puts spectra files part chunk partition. options performance partitionBy = \"spectrum\" requires less disk space. Note , inserting data takes considerable amount time, also subsequent creation database indices can take long (even longer data insertion blob = FALSE). backendInitialize(): get access initialize MsBackendSql object. Parameter object supposed MsBackendSql instance, created e.g. MsBackendSql(). Parameter dbcon expected connection existing MsBackendSql SQL database (created e.g. createMsBackendSqlDatabase()). backendInitialize() can alternatively also used create new MsBackendSql database using optional data parameter. case, dbcon expected writeable connection empty database data DataFrame full spectra data inserted database. format data match format DataFrame returned spectraData() function requires columns \"mz\" \"intensity\" m/z intensity values spectrum. backendInitialize() call create necessary tables database, fill tables provided data return MsBackendSql database. Thus, MsBackendSql supports setBackend method Spectra change () backend MsBackendSql. Note however chunk-wise (parallel) processing needs disabled case passing eventually f = factor() setBackend() call. supportsSetBackend(): whether MsBackendSql supports setBackend() method change MsBackend Spectra object MsBackendSql. Returns TRUE, thus, changing backend MsBackendSql supported writeable database connection provided addition parameter dbcon (.e. setBackend(sps, MsBackendSql(), dbcon = con) con connection empty database store full spectra data Spectra object sps specified database return Spectra object uses MsBackendSql). backendBpparam(): whether MsBackendSql supports parallel processing. Takes MsBackendSql parallel processing setup (see bpparam() details) input always returns SerialParam() since MsBackendSql support parallel processing. dbconn(): returns connection database.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/reference/MsBackendSql.html","id":"subsetting-merging-and-filtering-data","dir":"Reference","previous_headings":"","what":"Subsetting, merging and filtering data","title":"Spectra MS backend storing data in a SQL database — MsBackendSql","text":"MsBackendSql objects can subsetted using [ function. Internally, simply subset integer vector primary keys eventually cached data. original data database affected subsetting operation. subsetting operation can undone resetting object reset() function. Subsetting arbitrary order well index replication supported. Multiple MsBackendSql objects can also merged (combined) backendMerge() function. Note requires MsBackendSql objects connected database. function thus mostly used combining MsBackendSql objects previously splitted using e.g. split(). addition, MsBackendSql supports filtering methods available MsBackendCached(). Implementation filter functions optimized MsBackendSql objects : filterDataOrigin(): filter object retaining spectra dataOrigin spectra variable values matching provided ones parameter dataOrigin. function returns results order values provided parameter dataOrigin. filterMsLevel(): filter object based MS levels specified parameter msLevel. function filtering using SQL queries. \"msLevel\" local variable stored within object (hence memory) default implementation MsBackendCached used instead. filterPrecursorMzRange(): filters data keeping spectra precursorMz within m/z value range provided parameter mz (.e. spectra precursor m/z >= mz[1L] <= mz[2L]). filterPrecursorMzValues(): filters data keeping spectra precursor m/z values matching value(s) provided parameter mz. Parameters ppmandtoleranceallow specify acceptable differences compared values. Lengths ofppmandtolerancecan either1or equal tolength(mz)` use different values ppm tolerance provided m/z value. filterRt(): filter object keeping spectra retention times within specified retention time range (parameter rt). Optional parameter msLevel. allows restrict retention time filter provided MS level(s) returning spectra MS levels.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/reference/MsBackendSql.html","id":"accessing-and-modifying-data","dir":"Reference","previous_headings":"","what":"Accessing and modifying data","title":"Spectra MS backend storing data in a SQL database — MsBackendSql","text":"functions listed specifically implemented MsBackendSql. addition, MsBackendSql inherits supports data accessor, filtering functions data manipulation functions MsBackendCached(). $, $<-: access set (add) spectra variables object. Spectra variables added modified using $<- cached locally within object (data database never changed). restore object (.e. drop cached values) reset function can used. dataStorage(): returns character vector length spectra object name database containing data. intensity<-: supported. mz<-: supported. peaksData(): returns list spectras' peak data. length list equal number spectra object. element list matrix columns according parameter columns. empty spectrum, matrix 0 rows returned. Use peaksVariables(object) list supported values parameter columns. peaksVariables(): returns character available peak variables, .e. columns queried peaksData(). reset(): restores MsBackendSql re-initializing data database. subsetting cached spectra variables lost. spectraData(): gets general spectrum metadata. spectraData() returns DataFrame number rows spectra object. Parameter columns allows select specific spectra variables. spectraNames(), spectraNames<-: returns character length equal number spectra object primary keys spectra database (converted character). Replacing spectra names spectraNames<- supported. uniqueMsLevels(): returns unique MS levels spectra object. tic(): returns originally reported total ion count (initial = TRUE) calculates total ion count intensities spectrum (initial = FALSE).","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/reference/MsBackendSql.html","id":"implementation-notes","dir":"Reference","previous_headings":"","what":"Implementation notes","title":"Spectra MS backend storing data in a SQL database — MsBackendSql","text":"Internally, MsBackendSql class contains primary keys spectra stored SQL database. Keeping integer memory guarantees minimal memory footpring object. Still, depending number spectra database, integer vector might become large. data access involve SQL calls retrieve data database. extending MsBackendCached() object Spectra package, MsBackendSql supports (temporarily, .e. duration R session) add modify spectra variables. however stored data.frame within object thus increasing memory demand object.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/reference/MsBackendSql.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spectra MS backend storing data in a SQL database — MsBackendSql","text":"Johannes Rainer","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/reference/MsBackendSql.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spectra MS backend storing data in a SQL database — MsBackendSql","text":"","code":"#### ## Create a new MsBackendSql database  ## Define a file from which to import the data data_file <- system.file(\"microtofq\", \"MM8.mzML\", package = \"msdata\")  ## Create a database/connection to a database library(RSQLite) db_file <- tempfile() dbc <- dbConnect(SQLite(), db_file)  ## Import the data from the file into the database createMsBackendSqlDatabase(dbc, data_file) #> Importing data ...  #>  #> [==========================================================] 1/1 (100%) in  1s #>  #> Creating indices  #> . #> . #> . #> . #>  Done #> [1] TRUE dbDisconnect(dbc)  ## Initialize a MsBackendSql dbc <- dbConnect(SQLite(), db_file) be <- backendInitialize(MsBackendSql(), dbc)  be #> MsBackendSql with 198 spectra #>       msLevel precursorMz  polarity #>     <integer>   <numeric> <integer> #> 1           1          NA         1 #> 2           1          NA         1 #> 3           1          NA         1 #> 4           1          NA         1 #> 5           1          NA         1 #> ...       ...         ...       ... #> 194         1          NA         1 #> 195         1          NA         1 #> 196         1          NA         1 #> 197         1          NA         1 #> 198         1          NA         1 #>  ... 34 more variables/columns. #>  Use  'spectraVariables' to list all of them. #> Database: /tmp/RtmpjtfajU/file9913115c8bf  ## Original data source head(be$dataOrigin) #> [1] \"/__w/_temp/Library/msdata/microtofq/MM8.mzML\" #> [2] \"/__w/_temp/Library/msdata/microtofq/MM8.mzML\" #> [3] \"/__w/_temp/Library/msdata/microtofq/MM8.mzML\" #> [4] \"/__w/_temp/Library/msdata/microtofq/MM8.mzML\" #> [5] \"/__w/_temp/Library/msdata/microtofq/MM8.mzML\" #> [6] \"/__w/_temp/Library/msdata/microtofq/MM8.mzML\"  ## Data storage head(dataStorage(be)) #> [1] \"/tmp/RtmpjtfajU/file9913115c8bf\" \"/tmp/RtmpjtfajU/file9913115c8bf\" #> [3] \"/tmp/RtmpjtfajU/file9913115c8bf\" \"/tmp/RtmpjtfajU/file9913115c8bf\" #> [5] \"/tmp/RtmpjtfajU/file9913115c8bf\" \"/tmp/RtmpjtfajU/file9913115c8bf\"  ## Access all spectra data spd <- spectraData(be) spd #> DataFrame with 198 rows and 37 columns #>       msLevel     rtime acquisitionNum scanIndex                             mz #>     <integer> <numeric>      <integer> <integer>                  <NumericList> #> 1           1     0.486              1         1    104.554,106.996,107.966,... #> 2           1     0.822              2         2    107.960,109.964,112.027,... #> 3           1     1.159              3         3    107.963,112.021,113.035,... #> 4           1     1.495              4         4    105.971,109.984,112.028,... #> 5           1     1.832              5         5    104.474,107.000,109.968,... #> ...       ...       ...            ...       ...                            ... #> 194         1   65.4360            194       194    106.992,111.459,112.022,... #> 195         1   65.7720            195       195  99.0797,109.0031,112.0232,... #> 196         1   66.1092            196       196    102.927,108.970,112.028,... #> 197         1   66.4458            197       197    111.058,112.026,113.029,... #> 198         1   66.7818            198       198    111.044,112.024,112.518,... #>           intensity            dataStorage             dataOrigin centroided #>       <NumericList>            <character>            <character>  <logical> #> 1      23,35,50,... /tmp/RtmpjtfajU/file.. /__w/_temp/Library/m..       TRUE #> 2    35, 24,140,... /tmp/RtmpjtfajU/file.. /__w/_temp/Library/m..       TRUE #> 3    28,179,350,... /tmp/RtmpjtfajU/file.. /__w/_temp/Library/m..       TRUE #> 4    25, 28,131,... /tmp/RtmpjtfajU/file.. /__w/_temp/Library/m..       TRUE #> 5      26,30,25,... /tmp/RtmpjtfajU/file.. /__w/_temp/Library/m..       TRUE #> ...             ...                    ...                    ...        ... #> 194    34,24,86,... /tmp/RtmpjtfajU/file.. /__w/_temp/Library/m..       TRUE #> 195  24, 22,198,... /tmp/RtmpjtfajU/file.. /__w/_temp/Library/m..       TRUE #> 196    29,22,98,... /tmp/RtmpjtfajU/file.. /__w/_temp/Library/m..       TRUE #> 197  31,124,189,... /tmp/RtmpjtfajU/file.. /__w/_temp/Library/m..       TRUE #> 198    67,84,22,... /tmp/RtmpjtfajU/file.. /__w/_temp/Library/m..       TRUE #>      smoothed  polarity precScanNum precursorMz precursorIntensity #>     <logical> <integer>   <integer>   <numeric>          <numeric> #> 1          NA         1          NA          NA                 NA #> 2          NA         1          NA          NA                 NA #> 3          NA         1          NA          NA                 NA #> 4          NA         1          NA          NA                 NA #> 5          NA         1          NA          NA                 NA #> ...       ...       ...         ...         ...                ... #> 194        NA         1          NA          NA                 NA #> 195        NA         1          NA          NA                 NA #> 196        NA         1          NA          NA                 NA #> 197        NA         1          NA          NA                 NA #> 198        NA         1          NA          NA                 NA #>     precursorCharge collisionEnergy isolationWindowLowerMz #>           <integer>       <numeric>              <numeric> #> 1                NA              NA                     NA #> 2                NA              NA                     NA #> 3                NA              NA                     NA #> 4                NA              NA                     NA #> 5                NA              NA                     NA #> ...             ...             ...                    ... #> 194              NA              NA                     NA #> 195              NA              NA                     NA #> 196              NA              NA                     NA #> 197              NA              NA                     NA #> 198              NA              NA                     NA #>     isolationWindowTargetMz isolationWindowUpperMz peaksCount totIonCurrent #>                   <numeric>              <numeric>  <integer>     <numeric> #> 1                        NA                     NA       1743         97322 #> 2                        NA                     NA       1708         98590 #> 3                        NA                     NA       1708         96425 #> 4                        NA                     NA       1747         97144 #> 5                        NA                     NA       1730         94631 #> ...                     ...                    ...        ...           ... #> 194                      NA                     NA       2267        142472 #> 195                      NA                     NA       2488        167102 #> 196                      NA                     NA       2324        137565 #> 197                      NA                     NA       2105        113086 #> 198                      NA                     NA       1996         97257 #>     basePeakMZ basePeakIntensity ionisationEnergy     lowMZ    highMZ #>      <numeric>         <numeric>        <numeric> <numeric> <numeric> #> 1      144.050              7250                0   104.554  1004.470 #> 2      144.050              7064                0   107.960  1002.799 #> 3      144.050              7124                0   107.963   993.959 #> 4      144.051              7067                0   105.971   986.756 #> 5      144.051              6891                0   104.474  1003.469 #> ...        ...               ...              ...       ...       ... #> 194    144.051              4615                0  106.9921  1003.828 #> 195    144.051              3812                0   99.0797  1003.270 #> 196    144.050              3526                0  102.9272  1000.594 #> 197    144.050              3902                0  111.0582   984.228 #> 198    144.051              3587                0  111.0437  1000.851 #>     mergedScan mergedResultScanNum mergedResultStartScanNum #>      <integer>           <integer>                <integer> #> 1           NA                  NA                       NA #> 2           NA                  NA                       NA #> 3           NA                  NA                       NA #> 4           NA                  NA                       NA #> 5           NA                  NA                       NA #> ...        ...                 ...                      ... #> 194         NA                  NA                       NA #> 195         NA                  NA                       NA #> 196         NA                  NA                       NA #> 197         NA                  NA                       NA #> 198         NA                  NA                       NA #>     mergedResultEndScanNum injectionTime filterString  spectrumId #>                  <integer>     <numeric>  <character> <character> #> 1                       NA             0           NA      scan=1 #> 2                       NA             0           NA      scan=2 #> 3                       NA             0           NA      scan=3 #> 4                       NA             0           NA      scan=4 #> 5                       NA             0           NA      scan=5 #> ...                    ...           ...          ...         ... #> 194                     NA             0           NA    scan=194 #> 195                     NA             0           NA    scan=195 #> 196                     NA             0           NA    scan=196 #> 197                     NA             0           NA    scan=197 #> 198                     NA             0           NA    scan=198 #>     ionMobilityDriftTime scanWindowLowerLimit scanWindowUpperLimit spectrum_id_ #>                <numeric>            <numeric>            <numeric>    <integer> #> 1                     NA                   NA                   NA            1 #> 2                     NA                   NA                   NA            2 #> 3                     NA                   NA                   NA            3 #> 4                     NA                   NA                   NA            4 #> 5                     NA                   NA                   NA            5 #> ...                  ...                  ...                  ...          ... #> 194                   NA                   NA                   NA          194 #> 195                   NA                   NA                   NA          195 #> 196                   NA                   NA                   NA          196 #> 197                   NA                   NA                   NA          197 #> 198                   NA                   NA                   NA          198  ## Available variables spectraVariables(be) #>  [1] \"msLevel\"                  \"rtime\"                    #>  [3] \"acquisitionNum\"           \"scanIndex\"                #>  [5] \"mz\"                       \"intensity\"                #>  [7] \"dataStorage\"              \"dataOrigin\"               #>  [9] \"centroided\"               \"smoothed\"                 #> [11] \"polarity\"                 \"precScanNum\"              #> [13] \"precursorMz\"              \"precursorIntensity\"       #> [15] \"precursorCharge\"          \"collisionEnergy\"          #> [17] \"isolationWindowLowerMz\"   \"isolationWindowTargetMz\"  #> [19] \"isolationWindowUpperMz\"   \"peaksCount\"               #> [21] \"totIonCurrent\"            \"basePeakMZ\"               #> [23] \"basePeakIntensity\"        \"ionisationEnergy\"         #> [25] \"lowMZ\"                    \"highMZ\"                   #> [27] \"mergedScan\"               \"mergedResultScanNum\"      #> [29] \"mergedResultStartScanNum\" \"mergedResultEndScanNum\"   #> [31] \"injectionTime\"            \"filterString\"             #> [33] \"spectrumId\"               \"ionMobilityDriftTime\"     #> [35] \"scanWindowLowerLimit\"     \"scanWindowUpperLimit\"     #> [37] \"spectrum_id_\"              ## Access mz values mz(be) #> NumericList of length 198 #> [[1]] 104.553733825684 106.996170043945 ... 1002.67761230469 1004.47033691406 #> [[2]] 107.959617614746 109.964324951172 ... 991.343811035156 1002.79937744141 #> [[3]] 107.962753295898 112.021392822266 ... 964.238586425781 993.959167480469 #> [[4]] 105.970863342285 109.984230041504 ... 979.084838867188 986.755981445312 #> [[5]] 104.473876953125 106.999610900879 ... 1003.185546875 1003.46936035156 #> [[6]] 102.036674499512 107.963928222656 ... 993.781127929688 994.755920410156 #> [[7]] 104.272621154785 112.024925231934 ... 996.248046875 1001.64440917969 #> [[8]] 98.9297180175781 106.506416320801 ... 991.034484863281 997.045837402344 #> [[9]] 107.966445922852 109.385284423828 ... 995.031494140625 995.600463867188 #> [[10]] 108.965042114258 109.974197387695 ... 982.596313476562 989.777404785156 #> ... #> <188 more elements>  ## Subset the object to spectra in arbitrary order be_sub <- be[c(5, 1, 1, 2, 4, 100)] be_sub #> MsBackendSql with 6 spectra #>     msLevel precursorMz  polarity #>   <integer>   <numeric> <integer> #> 1         1          NA         1 #> 2         1          NA         1 #> 3         1          NA         1 #> 4         1          NA         1 #> 5         1          NA         1 #> 6         1          NA         1 #>  ... 34 more variables/columns. #>  Use  'spectraVariables' to list all of them. #> Database: /tmp/RtmpjtfajU/file9913115c8bf  ## The internal spectrum IDs (primary keys from the database) be_sub$spectrum_id_ #> [1]   5   1   1   2   4 100  ## Add additional spectra variables be_sub$new_variable <- \"B\"  ## This variable is *cached* locally within the object (not inserted into ## the database) be_sub$new_variable #> [1] \"B\" \"B\" \"B\" \"B\" \"B\" \"B\""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-1-3","dir":"Changelog","previous_headings":"","what":"Changes in 1.3.5","title":"MsBackendSql 1.3","text":"Improve input argument check error message backendInitialize() MsBackendOfflineSql. Update documentation adding () function names.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-1-3-1","dir":"Changelog","previous_headings":"","what":"Changes in 1.3.4","title":"MsBackendSql 1.3","text":"Ensure primary keys database correct order backendInitialize().","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-1-3-2","dir":"Changelog","previous_headings":"","what":"Changes in 1.3.3","title":"MsBackendSql 1.3","text":"Import method generics ProtGenerics.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-1-3-3","dir":"Changelog","previous_headings":"","what":"Changes in 1.3.2","title":"MsBackendSql 1.3","text":"Add dedicated setBackend method MsBackendSql MsBackendOfflineSql backends (issue #17).","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-1-3-4","dir":"Changelog","previous_headings":"","what":"Changes in 1.3.1","title":"MsBackendSql 1.3","text":"Add description use/advantages different SQL database systems vignette.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-1-1","dir":"Changelog","previous_headings":"","what":"Changes in 1.1.5","title":"MsBackendSql 1.1","text":"Add dbconn methods MsBackendSql MsBackendOfflineSql.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-1-1-1","dir":"Changelog","previous_headings":"","what":"Changes in 1.1.4","title":"MsBackendSql 1.1","text":"Improve performance createMsBackendSqlDatabase using also parallel processing peaksData call.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-1-1-2","dir":"Changelog","previous_headings":"","what":"Changes in 1.1.3","title":"MsBackendSql 1.1","text":"Add support setBackend MsBackendOfflineSql.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-1-1-3","dir":"Changelog","previous_headings":"","what":"Changes in 1.1.2","title":"MsBackendSql 1.1","text":"Mention documentation MsBackendSql can saved disk. Expand vignette adding related documentation.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-1-1-4","dir":"Changelog","previous_headings":"","what":"Changes in 1.1.1","title":"MsBackendSql 1.1","text":"Fix filterRt avoiding filter range infinite.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-0-99","dir":"Changelog","previous_headings":"","what":"Changes in 0.99.7","title":"MsBackendSql 0.99","text":"Decrease required R version 4.2.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-0-99-1","dir":"Changelog","previous_headings":"","what":"Changes in 0.99.6","title":"MsBackendSql 0.99","text":"Add mzR Suggests ensure package vignettes can build properly.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-0-99-2","dir":"Changelog","previous_headings":"","what":"Changes in 0.99.5","title":"MsBackendSql 0.99","text":"Add MsBackendOfflineSql backend re-connects database query.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-0-99-3","dir":"Changelog","previous_headings":"","what":"Changes in 0.99.4","title":"MsBackendSql 0.99","text":"Add backendBpparam method ensure parallel processing disabled MsBackendSql backend.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-0-99-4","dir":"Changelog","previous_headings":"","what":"Changes in 0.99.3","title":"MsBackendSql 0.99","text":"Add backendMerge method. Add parameter data backendInitialize allow creating new MsBackendSql database store values data . enables use Spectra,setBackend convert backend MsBackendSql. Implement supportsSetBackend enable setBackend,Spectra,MsBackendSql.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-0-99-5","dir":"Changelog","previous_headings":"","what":"Changes in 0.99.2","title":"MsBackendSql 0.99","text":"Evaluate validity MsBackendSql using full unit test suite Spectra package.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-0-99-6","dir":"Changelog","previous_headings":"","what":"Changes in 0.99.1","title":"MsBackendSql 0.99","text":"Address Kayla’s package review comments.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-0-99-7","dir":"Changelog","previous_headings":"","what":"Changes in 0.99.0","title":"MsBackendSql 0.99","text":"Prepare package submission Bioconductor.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-0-98","dir":"Changelog","previous_headings":"","what":"Changes in 0.98.1","title":"MsBackendSql 0.98","text":"Rename MsqlBackend MsBackendSql.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-0-98-1","dir":"Changelog","previous_headings":"","what":"Changes in 0.98.0","title":"MsBackendSql 0.98","text":"Add vignette.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-0-1","dir":"Changelog","previous_headings":"","what":"Changes in 0.1.0","title":"MsBackendSql 0.1","text":"Add parameter blob allow storing m/z intensity values BLOB data type database. MsBackendSql use different functions retrieve data database type storage.","code":""},{"path":[]},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-0-0","dir":"Changelog","previous_headings":"","what":"Changes in 0.0.5","title":"MsBackendSql 0.0","text":"Add filterMsLevel method. Add filterRt method. Add filterDataOrigin method. Add filterPrecursorMzRange method. Add filterPrecursorMzValues method.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-0-0-1","dir":"Changelog","previous_headings":"","what":"Changes in 0.0.4","title":"MsBackendSql 0.0","text":"Add optional parameter tempfile.","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-0-0-2","dir":"Changelog","previous_headings":"","what":"Changes in 0.0.3","title":"MsBackendSql 0.0","text":"Add peaksVariables methods add support parameter columns peaksData (Requires Spectra version 1.15.17).","code":""},{"path":"https://rformassspectrometry.github.io/MsBackendSql/news/index.html","id":"changes-in-0-0-3","dir":"Changelog","previous_headings":"","what":"Changes in 0.0.2","title":"MsBackendSql 0.0","text":"First full implementation MsBackendSql.","code":""}]
